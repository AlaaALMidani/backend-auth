دعنا نبدأ بتعريف ما هو الapi: 
الapi هو اختصار ل (Application Programming Interface):
يمكن تشبيه الapi بانه واجهة جهاز بيع العصائر المعلبة حيث انه لتسطيع اخذ عصير معين لابد من ارسال طلب عبر شاشة الجهاز وبالتالي اذا توفر طلبك فسيقط الى منطقة الاستلام 
وبالتالي في هذا المثال:

أنت: المستخدم الذي يريد الوصول إلى البيانات (العصائر)
الجهاز الزجاجي: الخادم الذي يحتوي على البيانات.
الشاشة : API
الطلب المكتوب: الطلب الذي ترسله للخادم.
النتيجة: الرد الذي تحصل عليه من الخادم.
لكن اذا اردنا شرح الموضوع بشكل تخصصي نقول إنها مجموعة من القواعد المحددة التي تمكن التطبيقات أو الأنظمة أو الخدمات المختلفة من التواصل مع بعضها البعض وتبادل البيانات بطريقة منظمة وموحدة.
ولتبسيط الامور نفرض ان الapi هو اي تابع عادي يمكن كتابته باي لغة برمجية مثل sum (a,b) وبفرض اننا كتبناه بلغة c++ ماذا اذا اردنا استعماله بملف ثاني وبلغة مختلفة مثل بايثون ؟؟
هنا يجب اضافة بعض البهارات الى التابع الخاص بنا لنرقيه ليصبح api يمكن انت يتم استدعاءه من مكان مختلف على نفس الشبكة 
لنبدأ باجابة السؤال الاول 
1.سنقارن على معايير مختلفة هي البنية ومتى يجب استخدام كل منهم والاداء :
اولا البنية : 
بالنسبة لل rest
الأسلوب معماري لا يحدد تفاصيل التنفيذ الدقيقة، مثل تنسيقات البيانات أو طرق الاتصال. بل يوفر إطارًا عامًا لتوجيه عملية التصميم.
بالنسبة الى soap 
هي بروتوكل يتحكم في تفاصيل كل شيء يخص نقل البيانات
ثانيا الاستخدام :
rest يستخدم في المشاريع التي لا تحوي على معلومات حساسة وانما مشاريع مثل متجر الكتروني او تطبيق تكسي 
soap يسخدم في المشاريع التي تتعامل مع بيانات هامة جدا وتحتاج الى نوع قوي من الحماية 
ثالثا الاداء : 
اrest ادائها سريع وقوي جدا لانو تنقل المعلومات على شكل json 
بينما soap ادائها منخفض وبطيء ويمكن ان تصل حجم البيانات المرسل من خلالها ضعفي الحجم لو ارسنا تلك البيانات في rest 

